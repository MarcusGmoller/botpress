name: Deploy Integrations
description: Deploys integrations

input:
  environment:
    type: choice
    description: 'Environment to deploy to'
    required: true
    options:
      - staging
      - production
  sentry_auth_token:
    description: 'Sentry auth token'
    required: true
  token_cloud_ops_account:
    description: 'Cloud Ops account token'
    required: true
  cloud_ops_workspace_id:
    description: 'Cloud Ops workspace id'
    required: true
  gmail_client_id:
    description: 'Gmail client id'
    required: true
  gmail_client_secret:
    description: 'Gmail client secret'
    required: true
  gmail_topic_name:
    description: 'Gmail topic name'
    required: true
  linear_client_id:
    description: 'Linear client id'
    required: true
  linear_client_secret:
    description: 'Linear client secret'
    required: true
  linear_webhook_signing_secret:
    description: 'Linear webhook signing secret'
    required: true
  slack_client_id:
    description: 'Slack client id'
    required: true
  slack_client_secret:
    description: 'Slack client secret'
    required: true

runs:
  using: 'composite'
  steps:
    - name: List Sentry Integrations
      id: list_sentry_integrations
      shell: bash
      run: |
        script_path="./.github/scripts/ls-sentry-integrations.sh"
        chmod +x $script_path
        filter=$($script_path)
        echo "::set-output name=filter::$filter"
    - name: Inject SourceMaps
      shell: bash
      run: pnpm -r --stream ${{ steps.list_sentry_integrations.outputs.filter }} exec sentry-cli sourcemaps inject .botpress/dist
    - name: Upload SourceMaps
      shell: bash
      run: pnpm -r --stream ${{ steps.list_sentry_integrations.outputs.filter }} exec sentry-cli sourcemaps upload --release=${{ github.sha }} --url-prefix '~' .botpress/dist
      env:
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry_auth_token }}
        SENTRY_ORG: botpress-rm
        SENTRY_RELEASE: ${{ github.sha }}
    - name: Deploys Integrations
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        TOKEN_CLOUD_OPS_ACCOUNT: ${{ inputs.token_cloud_ops_account }}
        CLOUD_OPS_WORKSPACE_ID: ${{ inputs.cloud_ops_workspace_id }}
      shell: bash
      run: |
        api_url="${{ inputs.environment == 'staging' && 'https://api.botpress.dev' || 'https://api.botpress.cloud' }}"

        # login

        echo "### Logging in to $api_url ###"
        pnpm bp login -y --api-url $api_url --workspaceId "$CLOUD_OPS_WORKSPACE_ID" --token "$TOKEN_CLOUD_OPS_ACCOUNT"

        # deploy

        echo "### Deploying integrations ###"

        echo "\033[1;32m<=== deploying asana ==>\033[0m"
        pnpm -F "asana" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying discord ==>\033[0m"
        pnpm -F "discord" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying github ==>\033[0m"
        pnpm -F "github" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying gmail ==>\033[0m"
        pnpm -F "gmail" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying gsheets ==>\033[0m"
        pnpm -F "gsheets" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying instagram ==>\033[0m"
        pnpm -F "instagram" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying intercom ==>\033[0m"
        pnpm -F "intercom" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying line ==>\033[0m"
        pnpm -F "line" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying linear ==>\033[0m"
        pnpm -F "linear" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying messenger ==>\033[0m"
        pnpm -F "messenger" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying notion ==>\033[0m"
        pnpm -F "notion" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying slack ==>\033[0m"
        pnpm -F "slack" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying sunco ==>\033[0m"
        pnpm -F "sunco" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying teams ==>\033[0m"
        pnpm -F "teams" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying telegram ==>\033[0m"
        pnpm -F "telegram" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying trello ==>\033[0m"
        pnpm -F "trello" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying twilio ==>\033[0m"
        pnpm -F "twilio" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying viber ==>\033[0m"
        pnpm -F "viber" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying vonage ==>\033[0m"
        pnpm -F "vonage" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== webchat skipped ==>\033[0m"
        # pnpm -F "webchat" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying webhook ==>\033[0m"
        pnpm -F "webhook" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying whatsapp ==>\033[0m"
        pnpm -F "whatsapp" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying zapier ==>\033[0m"
        pnpm -F "zapier" -c exec bp deploy -y -v --noBuild
        echo "\033[1;32m<=== deploying zendesk ==>\033[0m"
        pnpm -F "zendesk" -c exec bp deploy -y -v --noBuild
