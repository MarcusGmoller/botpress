/** Declaration file generated by dts-gen */

export class ParseInputLazyPath {
    constructor(...args: any[]);

}

export class ParseStatus {
    constructor(...args: any[]);

    abort(...args: any[]): void;

    dirty(...args: any[]): void;

    static mergeArray(...args: any[]): void;

    static mergeObjectAsync(...args: any[]): void;

    static mergeObjectSync(...args: any[]): void;

}

export class Schema {
    constructor(...args: any[]);

    and(...args: any[]): void;

    array(...args: any[]): void;

    brand(...args: any[]): void;

    catch(...args: any[]): void;

    default(...args: any[]): void;

    describe(...args: any[]): void;

    disabled(...args: any[]): void;

    displayAs(...args: any[]): void;

    hidden(...args: any[]): void;

    isNullable(...args: any[]): void;

    isOptional(...args: any[]): void;

    nullable(...args: any[]): void;

    nullish(...args: any[]): void;

    optional(...args: any[]): void;

    or(...args: any[]): void;

    parse(...args: any[]): void;

    parseAsync(...args: any[]): void;

    pipe(...args: any[]): void;

    placeholder(...args: any[]): void;

    promise(...args: any[]): void;

    readonly(...args: any[]): void;

    refine(...args: any[]): void;

    refinement(...args: any[]): void;

    safeParse(...args: any[]): void;

    safeParseAsync(...args: any[]): void;

    superRefine(...args: any[]): void;

    title(...args: any[]): void;

    toJsonSchema(...args: any[]): void;

    toTypescriptTypings(...args: any[]): void;

    transform(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodAny {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodArray {
    constructor(...args: any[]);

    length(...args: any[]): void;

    max(...args: any[]): void;

    min(...args: any[]): void;

    nonempty(...args: any[]): void;

    static create(schema: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodBigInt {
    constructor(...args: any[]);

    gt(...args: any[]): void;

    gte(...args: any[]): void;

    lt(...args: any[]): void;

    lte(...args: any[]): void;

    multipleOf(...args: any[]): void;

    negative(...args: any[]): void;

    nonnegative(...args: any[]): void;

    nonpositive(...args: any[]): void;

    positive(...args: any[]): void;

    setLimit(...args: any[]): void;

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodBoolean {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodBranded {
    constructor(...args: any[]);

    unwrap(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodCatch {
    constructor(...args: any[]);

    removeCatch(...args: any[]): void;

    static create(type: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodDate {
    constructor(...args: any[]);

    max(...args: any[]): void;

    min(...args: any[]): void;

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodDefault {
    constructor(...args: any[]);

    removeDefault(...args: any[]): void;

    static create(type: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodDiscriminatedUnion {
    constructor(...args: any[]);

    static create(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodEffects {
    constructor(...args: any[]);

    innerType(...args: any[]): void;

    sourceType(...args: any[]): void;

    static create(schema: any, effect: any, params: any): any;

    static createWithPreprocess(preprocess: any, schema: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodEnum {
    constructor(...args: any[]);

    exclude(...args: any[]): void;

    extract(...args: any[]): void;

    static create(values: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodError {
    constructor(...args: any[]);

    flatten(...args: any[]): void;

    format(...args: any[]): void;

    toString(...args: any[]): void;

    static assert(...args: any[]): void;

    static captureStackTrace(p0: any, p1: any): any;

    static create(issues: any): any;

    static stackTraceLimit: number;

}

export class ZodFunction {
    constructor(...args: any[]);

    args(...args: any[]): void;

    implement(...args: any[]): void;

    parameters(...args: any[]): void;

    returnType(...args: any[]): void;

    returns(...args: any[]): void;

    strictImplement(...args: any[]): void;

    static create(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodIntersection {
    constructor(...args: any[]);

    static create(left: any, right: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodLazy {
    constructor(...args: any[]);

    static create(getter: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodLiteral {
    constructor(...args: any[]);

    static create(value: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodMap {
    constructor(...args: any[]);

    static create(keyType: any, valueType: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNaN {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNativeEnum {
    constructor(...args: any[]);

    static create(values: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNever {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNull {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNullable {
    constructor(...args: any[]);

    unwrap(...args: any[]): void;

    static create(type: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodNumber {
    constructor(...args: any[]);

    finite(...args: any[]): void;

    gt(...args: any[]): void;

    gte(...args: any[]): void;

    int(...args: any[]): void;

    lt(...args: any[]): void;

    lte(...args: any[]): void;

    multipleOf(...args: any[]): void;

    negative(...args: any[]): void;

    nonnegative(...args: any[]): void;

    nonpositive(...args: any[]): void;

    positive(...args: any[]): void;

    safe(...args: any[]): void;

    setLimit(...args: any[]): void;

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodObject {
    constructor(...args: any[]);

    catchall(...args: any[]): void;

    deepPartial(...args: any[]): void;

    extend(...args: any[]): void;

    keyof(...args: any[]): void;

    merge(...args: any[]): void;

    omit(...args: any[]): void;

    partial(...args: any[]): void;

    passthrough(...args: any[]): void;

    pick(...args: any[]): void;

    required(...args: any[]): void;

    setKey(...args: any[]): void;

    strict(...args: any[]): void;

    strip(...args: any[]): void;

    static create(shape: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

    static lazycreate(shape: any, params: any): any;

    static strictCreate(shape: any, params: any): any;

}

export class ZodOptional {
    constructor(...args: any[]);

    unwrap(...args: any[]): void;

    static create(type: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodPipeline {
    constructor(...args: any[]);

    static create(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodPromise {
    constructor(...args: any[]);

    unwrap(...args: any[]): void;

    static create(schema: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodReadonly {
    constructor(...args: any[]);

    unwrap(...args: any[]): void;

    static create(type: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodRecord {
    constructor(...args: any[]);

    static create(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodSchema {
    constructor(...args: any[]);

    and(...args: any[]): void;

    array(...args: any[]): void;

    brand(...args: any[]): void;

    catch(...args: any[]): void;

    default(...args: any[]): void;

    describe(...args: any[]): void;

    disabled(...args: any[]): void;

    displayAs(...args: any[]): void;

    hidden(...args: any[]): void;

    isNullable(...args: any[]): void;

    isOptional(...args: any[]): void;

    nullable(...args: any[]): void;

    nullish(...args: any[]): void;

    optional(...args: any[]): void;

    or(...args: any[]): void;

    parse(...args: any[]): void;

    parseAsync(...args: any[]): void;

    pipe(...args: any[]): void;

    placeholder(...args: any[]): void;

    promise(...args: any[]): void;

    readonly(...args: any[]): void;

    refine(...args: any[]): void;

    refinement(...args: any[]): void;

    safeParse(...args: any[]): void;

    safeParseAsync(...args: any[]): void;

    superRefine(...args: any[]): void;

    title(...args: any[]): void;

    toJsonSchema(...args: any[]): void;

    toTypescriptTypings(...args: any[]): void;

    transform(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodSet {
    constructor(...args: any[]);

    max(...args: any[]): void;

    min(...args: any[]): void;

    nonempty(...args: any[]): void;

    size(...args: any[]): void;

    static create(valueType: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodString {
    constructor(...args: any[]);

    cuid(...args: any[]): void;

    cuid2(...args: any[]): void;

    datetime(...args: any[]): void;

    email(...args: any[]): void;

    emoji(...args: any[]): void;

    endsWith(...args: any[]): void;

    includes(...args: any[]): void;

    ip(...args: any[]): void;

    length(...args: any[]): void;

    max(...args: any[]): void;

    min(...args: any[]): void;

    nonempty(...args: any[]): void;

    regex(...args: any[]): void;

    startsWith(...args: any[]): void;

    toLowerCase(...args: any[]): void;

    toUpperCase(...args: any[]): void;

    trim(...args: any[]): void;

    ulid(...args: any[]): void;

    url(...args: any[]): void;

    uuid(...args: any[]): void;

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodSymbol {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodTemplateLiteral {
    constructor(...args: any[]);

    interpolated(...args: any[]): void;

    literal(...args: any[]): void;

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodTransformer {
    constructor(...args: any[]);

    innerType(...args: any[]): void;

    sourceType(...args: any[]): void;

    static create(schema: any, effect: any, params: any): any;

    static createWithPreprocess(preprocess: any, schema: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodTuple {
    constructor(...args: any[]);

    rest(...args: any[]): void;

    static create(schemas: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodType {
    constructor(...args: any[]);

    and(...args: any[]): void;

    array(...args: any[]): void;

    brand(...args: any[]): void;

    catch(...args: any[]): void;

    default(...args: any[]): void;

    describe(...args: any[]): void;

    disabled(...args: any[]): void;

    displayAs(...args: any[]): void;

    hidden(...args: any[]): void;

    isNullable(...args: any[]): void;

    isOptional(...args: any[]): void;

    nullable(...args: any[]): void;

    nullish(...args: any[]): void;

    optional(...args: any[]): void;

    or(...args: any[]): void;

    parse(...args: any[]): void;

    parseAsync(...args: any[]): void;

    pipe(...args: any[]): void;

    placeholder(...args: any[]): void;

    promise(...args: any[]): void;

    readonly(...args: any[]): void;

    refine(...args: any[]): void;

    refinement(...args: any[]): void;

    safeParse(...args: any[]): void;

    safeParseAsync(...args: any[]): void;

    superRefine(...args: any[]): void;

    title(...args: any[]): void;

    toJsonSchema(...args: any[]): void;

    toTypescriptTypings(...args: any[]): void;

    transform(...args: any[]): void;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodUndefined {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodUnion {
    constructor(...args: any[]);

    static create(types: any, params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodUnknown {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export class ZodVoid {
    constructor(...args: any[]);

    static create(params: any): any;

    static fromJsonSchema(...args: any[]): void;

    static fromObject(...args: any[]): void;

}

export const BRAND: any;

export const EMPTY_PATH: any[];

export const INVALID: {
    status: string;
};

export const NEVER: {
    status: string;
};

export const ZodFirstPartyTypeKind: {
    ZodAny: string;
    ZodArray: string;
    ZodBigInt: string;
    ZodBoolean: string;
    ZodBranded: string;
    ZodCatch: string;
    ZodDate: string;
    ZodDefault: string;
    ZodDiscriminatedUnion: string;
    ZodEffects: string;
    ZodEnum: string;
    ZodFunction: string;
    ZodIntersection: string;
    ZodLazy: string;
    ZodLiteral: string;
    ZodMap: string;
    ZodNaN: string;
    ZodNativeEnum: string;
    ZodNever: string;
    ZodNull: string;
    ZodNullable: string;
    ZodNumber: string;
    ZodObject: string;
    ZodOptional: string;
    ZodPipeline: string;
    ZodPromise: string;
    ZodReadonly: string;
    ZodRecord: string;
    ZodSet: string;
    ZodString: string;
    ZodSymbol: string;
    ZodTemplateLiteral: string;
    ZodTuple: string;
    ZodUndefined: string;
    ZodUnion: string;
    ZodUnknown: string;
    ZodVoid: string;
};

export const ZodIssueCode: {
    custom: string;
    invalid_arguments: string;
    invalid_date: string;
    invalid_enum_value: string;
    invalid_intersection_types: string;
    invalid_literal: string;
    invalid_return_type: string;
    invalid_string: string;
    invalid_type: string;
    invalid_union: string;
    invalid_union_discriminator: string;
    not_finite: string;
    not_multiple_of: string;
    too_big: string;
    too_small: string;
    unrecognized_keys: string;
};

export const ZodParsedType: {
    array: string;
    bigint: string;
    boolean: string;
    date: string;
    float: string;
    function: string;
    integer: string;
    map: string;
    nan: string;
    never: string;
    null: string;
    number: string;
    object: string;
    promise: string;
    set: string;
    string: string;
    symbol: string;
    undefined: string;
    unknown: string;
    void: string;
};

export const cuid2Regex: RegExp;

export const cuidRegex: RegExp;

export const emailRegex: RegExp;

export const ipv4Regex: RegExp;

export const ipv6Regex: RegExp;

export const ulidRegex: RegExp;

export const uuidRegex: RegExp;

export function DIRTY(value: any): void;

export function OK(value: any): void;

export function ZodTemplateLiteralUnsupportedCheckError(...args: any[]): void;

export function ZodTemplateLiteralUnsupportedTypeError(...args: any[]): void;

export function ZuiForm({
  schema,
  components,
  onChange,
  value,
  disableValidation
}: any): any;

export function addIssueToContext(ctx: any, issueData: any): void;

export function any(params: any): any;

export function array(schema: any, params: any): any;

export function bigint(params: any): any;

export function createZodEnum(values: any, params: any): any;

export function custom(check: any, params: any, fatal: any): any;

export function date(params: any): any;

export function datetimeRegex(args: any): any;

export function defaultErrorMap(issue: any, _ctx: any): any;

export function discriminatedUnion(...args: any[]): void;

export function effect(schema: any, effect: any, params: any): any;

export function fromJsonSchema(...args: any[]): void;

export function fromObject(...args: any[]): void;

export function getErrorMap(): any;

export function getParsedType(data: any): any;

export function intersection(left: any, right: any, params: any): any;

export function isAborted(x: any): void;

export function isAsync(x: any): void;

export function isDirty(x: any): void;

export function isValid(x: any): void;

export function jsonSchemaToZui(schema: any): any;

export function lazy(getter: any, params: any): any;

export function literal(value: any, params: any): any;

export function makeIssue(params: any): any;

export function map(keyType: any, valueType: any, params: any): any;

export function nan(params: any): any;

export function nativeEnum(values: any, params: any): any;

export function never(params: any): any;

export function nullable(type: any, params: any): any;

export function number(params: any): any;

export function object(shape: any, params: any): any;

export function objectToZui(obj: any, opts: any, isRoot: any): any;

export function oboolean(): void;

export function onumber(): void;

export function optional(type: any, params: any): any;

export function ostring(): void;

export function pipeline(...args: any[]): void;

export function preprocess(preprocess: any, schema: any, params: any): any;

export function processCreateParams(params: any): any;

export function promise(schema: any, params: any): any;

export function quotelessJson(obj: any): any;

export function record(...args: any[]): void;

export function set(valueType: any, params: any): any;

export function setErrorMap(map2: any): void;

export function strictObject(shape: any, params: any): any;

export function string(params: any): any;

export function symbol(params: any): any;

export function templateLiteral(params: any): any;

export function transformer(schema: any, effect: any, params: any): any;

export function tuple(schemas: any, params: any): any;

export function undefined(params: any): any;

export function union(types: any, params: any): any;

export function unknown(params: any): any;

export function zuiToJsonSchema(zuiType: any, opts: any): any;

export namespace ZodTemplateLiteralUnsupportedCheckError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

}

export namespace ZodTemplateLiteralUnsupportedTypeError {
    const stackTraceLimit: number;

    function captureStackTrace(p0: any, p1: any): any;

}

export namespace coerce {
    function bigint(arg: any): void;

    function date(arg: any): void;

    function number(arg: any): void;

    function string(arg: any): void;

    function templateLiteral(arg: any): void;

}

export namespace errorUtil {
    function errToObj(message: any): void;

    function toString(message: any): void;

}

export namespace late {
    function object(shape: any, params: any): any;

}

export namespace objectUtil {
    function mergeShapes(first: any, second: any): any;

}

export namespace transforms {
    function jsonSchemaToZui(schema: any): any;

    function objectToZui(obj: any, opts: any, isRoot: any): any;

    function zuiToJsonSchema(zuiType: any, opts: any): any;

    function zuiToTypescriptTypings(jsonSchema: any, options: any): any;

}

export namespace util {
    function arrayToEnum(items: any): any;

    function assertEqual(val: any): void;

    function assertIs(_arg: any): void;

    function assertNever(_x: any): void;

    function find(arr: any, checker: any): any;

    function getValidEnumValues(obj: any): any;

    function isInteger(val: any): void;

    function joinValues(array: any, separator: any): any;

    function jsonStringifyReplacer(_: any, value: any): any;

    function objectKeys(obj: any): void;

    function objectValues(obj: any): any;

}

export namespace z {
    class ParseInputLazyPath {
        constructor(...args: any[]);

    }

    class ParseStatus {
        constructor(...args: any[]);

        abort(...args: any[]): void;

        dirty(...args: any[]): void;

        static mergeArray(...args: any[]): void;

        static mergeObjectAsync(...args: any[]): void;

        static mergeObjectSync(...args: any[]): void;

    }

    class Schema {
        constructor(...args: any[]);

        and(...args: any[]): void;

        array(...args: any[]): void;

        brand(...args: any[]): void;

        catch(...args: any[]): void;

        default(...args: any[]): void;

        describe(...args: any[]): void;

        disabled(...args: any[]): void;

        displayAs(...args: any[]): void;

        hidden(...args: any[]): void;

        isNullable(...args: any[]): void;

        isOptional(...args: any[]): void;

        nullable(...args: any[]): void;

        nullish(...args: any[]): void;

        optional(...args: any[]): void;

        or(...args: any[]): void;

        parse(...args: any[]): void;

        parseAsync(...args: any[]): void;

        pipe(...args: any[]): void;

        placeholder(...args: any[]): void;

        promise(...args: any[]): void;

        readonly(...args: any[]): void;

        refine(...args: any[]): void;

        refinement(...args: any[]): void;

        safeParse(...args: any[]): void;

        safeParseAsync(...args: any[]): void;

        superRefine(...args: any[]): void;

        title(...args: any[]): void;

        toJsonSchema(...args: any[]): void;

        toTypescriptTypings(...args: any[]): void;

        transform(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodAny {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodArray {
        constructor(...args: any[]);

        length(...args: any[]): void;

        max(...args: any[]): void;

        min(...args: any[]): void;

        nonempty(...args: any[]): void;

        static create(schema: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodBigInt {
        constructor(...args: any[]);

        gt(...args: any[]): void;

        gte(...args: any[]): void;

        lt(...args: any[]): void;

        lte(...args: any[]): void;

        multipleOf(...args: any[]): void;

        negative(...args: any[]): void;

        nonnegative(...args: any[]): void;

        nonpositive(...args: any[]): void;

        positive(...args: any[]): void;

        setLimit(...args: any[]): void;

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodBoolean {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodBranded {
        constructor(...args: any[]);

        unwrap(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodCatch {
        constructor(...args: any[]);

        removeCatch(...args: any[]): void;

        static create(type: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodDate {
        constructor(...args: any[]);

        max(...args: any[]): void;

        min(...args: any[]): void;

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodDefault {
        constructor(...args: any[]);

        removeDefault(...args: any[]): void;

        static create(type: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodDiscriminatedUnion {
        constructor(...args: any[]);

        static create(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodEffects {
        constructor(...args: any[]);

        innerType(...args: any[]): void;

        sourceType(...args: any[]): void;

        static create(schema: any, effect: any, params: any): any;

        static createWithPreprocess(preprocess: any, schema: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodEnum {
        constructor(...args: any[]);

        exclude(...args: any[]): void;

        extract(...args: any[]): void;

        static create(values: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodError {
        constructor(...args: any[]);

        flatten(...args: any[]): void;

        format(...args: any[]): void;

        toString(...args: any[]): void;

        static assert(...args: any[]): void;

        static captureStackTrace(p0: any, p1: any): any;

        static create(issues: any): any;

        static stackTraceLimit: number;

    }

    class ZodFunction {
        constructor(...args: any[]);

        args(...args: any[]): void;

        implement(...args: any[]): void;

        parameters(...args: any[]): void;

        returnType(...args: any[]): void;

        returns(...args: any[]): void;

        strictImplement(...args: any[]): void;

        static create(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodIntersection {
        constructor(...args: any[]);

        static create(left: any, right: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodLazy {
        constructor(...args: any[]);

        static create(getter: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodLiteral {
        constructor(...args: any[]);

        static create(value: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodMap {
        constructor(...args: any[]);

        static create(keyType: any, valueType: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNaN {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNativeEnum {
        constructor(...args: any[]);

        static create(values: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNever {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNull {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNullable {
        constructor(...args: any[]);

        unwrap(...args: any[]): void;

        static create(type: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodNumber {
        constructor(...args: any[]);

        finite(...args: any[]): void;

        gt(...args: any[]): void;

        gte(...args: any[]): void;

        int(...args: any[]): void;

        lt(...args: any[]): void;

        lte(...args: any[]): void;

        multipleOf(...args: any[]): void;

        negative(...args: any[]): void;

        nonnegative(...args: any[]): void;

        nonpositive(...args: any[]): void;

        positive(...args: any[]): void;

        safe(...args: any[]): void;

        setLimit(...args: any[]): void;

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodObject {
        constructor(...args: any[]);

        catchall(...args: any[]): void;

        deepPartial(...args: any[]): void;

        extend(...args: any[]): void;

        keyof(...args: any[]): void;

        merge(...args: any[]): void;

        omit(...args: any[]): void;

        partial(...args: any[]): void;

        passthrough(...args: any[]): void;

        pick(...args: any[]): void;

        required(...args: any[]): void;

        setKey(...args: any[]): void;

        strict(...args: any[]): void;

        strip(...args: any[]): void;

        static create(shape: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

        static lazycreate(shape: any, params: any): any;

        static strictCreate(shape: any, params: any): any;

    }

    class ZodOptional {
        constructor(...args: any[]);

        unwrap(...args: any[]): void;

        static create(type: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodPipeline {
        constructor(...args: any[]);

        static create(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodPromise {
        constructor(...args: any[]);

        unwrap(...args: any[]): void;

        static create(schema: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodReadonly {
        constructor(...args: any[]);

        unwrap(...args: any[]): void;

        static create(type: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodRecord {
        constructor(...args: any[]);

        static create(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodSchema {
        constructor(...args: any[]);

        and(...args: any[]): void;

        array(...args: any[]): void;

        brand(...args: any[]): void;

        catch(...args: any[]): void;

        default(...args: any[]): void;

        describe(...args: any[]): void;

        disabled(...args: any[]): void;

        displayAs(...args: any[]): void;

        hidden(...args: any[]): void;

        isNullable(...args: any[]): void;

        isOptional(...args: any[]): void;

        nullable(...args: any[]): void;

        nullish(...args: any[]): void;

        optional(...args: any[]): void;

        or(...args: any[]): void;

        parse(...args: any[]): void;

        parseAsync(...args: any[]): void;

        pipe(...args: any[]): void;

        placeholder(...args: any[]): void;

        promise(...args: any[]): void;

        readonly(...args: any[]): void;

        refine(...args: any[]): void;

        refinement(...args: any[]): void;

        safeParse(...args: any[]): void;

        safeParseAsync(...args: any[]): void;

        superRefine(...args: any[]): void;

        title(...args: any[]): void;

        toJsonSchema(...args: any[]): void;

        toTypescriptTypings(...args: any[]): void;

        transform(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodSet {
        constructor(...args: any[]);

        max(...args: any[]): void;

        min(...args: any[]): void;

        nonempty(...args: any[]): void;

        size(...args: any[]): void;

        static create(valueType: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodString {
        constructor(...args: any[]);

        cuid(...args: any[]): void;

        cuid2(...args: any[]): void;

        datetime(...args: any[]): void;

        email(...args: any[]): void;

        emoji(...args: any[]): void;

        endsWith(...args: any[]): void;

        includes(...args: any[]): void;

        ip(...args: any[]): void;

        length(...args: any[]): void;

        max(...args: any[]): void;

        min(...args: any[]): void;

        nonempty(...args: any[]): void;

        regex(...args: any[]): void;

        startsWith(...args: any[]): void;

        toLowerCase(...args: any[]): void;

        toUpperCase(...args: any[]): void;

        trim(...args: any[]): void;

        ulid(...args: any[]): void;

        url(...args: any[]): void;

        uuid(...args: any[]): void;

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodSymbol {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodTemplateLiteral {
        constructor(...args: any[]);

        interpolated(...args: any[]): void;

        literal(...args: any[]): void;

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodTransformer {
        constructor(...args: any[]);

        innerType(...args: any[]): void;

        sourceType(...args: any[]): void;

        static create(schema: any, effect: any, params: any): any;

        static createWithPreprocess(preprocess: any, schema: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodTuple {
        constructor(...args: any[]);

        rest(...args: any[]): void;

        static create(schemas: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodType {
        constructor(...args: any[]);

        and(...args: any[]): void;

        array(...args: any[]): void;

        brand(...args: any[]): void;

        catch(...args: any[]): void;

        default(...args: any[]): void;

        describe(...args: any[]): void;

        disabled(...args: any[]): void;

        displayAs(...args: any[]): void;

        hidden(...args: any[]): void;

        isNullable(...args: any[]): void;

        isOptional(...args: any[]): void;

        nullable(...args: any[]): void;

        nullish(...args: any[]): void;

        optional(...args: any[]): void;

        or(...args: any[]): void;

        parse(...args: any[]): void;

        parseAsync(...args: any[]): void;

        pipe(...args: any[]): void;

        placeholder(...args: any[]): void;

        promise(...args: any[]): void;

        readonly(...args: any[]): void;

        refine(...args: any[]): void;

        refinement(...args: any[]): void;

        safeParse(...args: any[]): void;

        safeParseAsync(...args: any[]): void;

        superRefine(...args: any[]): void;

        title(...args: any[]): void;

        toJsonSchema(...args: any[]): void;

        toTypescriptTypings(...args: any[]): void;

        transform(...args: any[]): void;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodUndefined {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodUnion {
        constructor(...args: any[]);

        static create(types: any, params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodUnknown {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    class ZodVoid {
        constructor(...args: any[]);

        static create(params: any): any;

        static fromJsonSchema(...args: any[]): void;

        static fromObject(...args: any[]): void;

    }

    const BRAND: any;

    const EMPTY_PATH: any[];

    const INVALID: {
        status: string;
    };

    const NEVER: {
        status: string;
    };

    const ZodFirstPartyTypeKind: {
        ZodAny: string;
        ZodArray: string;
        ZodBigInt: string;
        ZodBoolean: string;
        ZodBranded: string;
        ZodCatch: string;
        ZodDate: string;
        ZodDefault: string;
        ZodDiscriminatedUnion: string;
        ZodEffects: string;
        ZodEnum: string;
        ZodFunction: string;
        ZodIntersection: string;
        ZodLazy: string;
        ZodLiteral: string;
        ZodMap: string;
        ZodNaN: string;
        ZodNativeEnum: string;
        ZodNever: string;
        ZodNull: string;
        ZodNullable: string;
        ZodNumber: string;
        ZodObject: string;
        ZodOptional: string;
        ZodPipeline: string;
        ZodPromise: string;
        ZodReadonly: string;
        ZodRecord: string;
        ZodSet: string;
        ZodString: string;
        ZodSymbol: string;
        ZodTemplateLiteral: string;
        ZodTuple: string;
        ZodUndefined: string;
        ZodUnion: string;
        ZodUnknown: string;
        ZodVoid: string;
    };

    const ZodIssueCode: {
        custom: string;
        invalid_arguments: string;
        invalid_date: string;
        invalid_enum_value: string;
        invalid_intersection_types: string;
        invalid_literal: string;
        invalid_return_type: string;
        invalid_string: string;
        invalid_type: string;
        invalid_union: string;
        invalid_union_discriminator: string;
        not_finite: string;
        not_multiple_of: string;
        too_big: string;
        too_small: string;
        unrecognized_keys: string;
    };

    const ZodParsedType: {
        array: string;
        bigint: string;
        boolean: string;
        date: string;
        float: string;
        function: string;
        integer: string;
        map: string;
        nan: string;
        never: string;
        null: string;
        number: string;
        object: string;
        promise: string;
        set: string;
        string: string;
        symbol: string;
        undefined: string;
        unknown: string;
        void: string;
    };

    const cuid2Regex: RegExp;

    const cuidRegex: RegExp;

    const emailRegex: RegExp;

    const ipv4Regex: RegExp;

    const ipv6Regex: RegExp;

    const ulidRegex: RegExp;

    const uuidRegex: RegExp;

    function DIRTY(value: any): void;

    function OK(value: any): void;

    function ZodTemplateLiteralUnsupportedCheckError(...args: any[]): void;

    function ZodTemplateLiteralUnsupportedTypeError(...args: any[]): void;

    function addIssueToContext(ctx: any, issueData: any): void;

    function any(params: any): any;

    function array(schema: any, params: any): any;

    function bigint(params: any): any;

    function createZodEnum(values: any, params: any): any;

    function custom(check: any, params: any, fatal: any): any;

    function date(params: any): any;

    function datetimeRegex(args: any): any;

    function defaultErrorMap(issue: any, _ctx: any): any;

    function discriminatedUnion(...args: any[]): void;

    function effect(schema: any, effect: any, params: any): any;

    function fromJsonSchema(...args: any[]): void;

    function fromObject(...args: any[]): void;

    function getErrorMap(): any;

    function getParsedType(data: any): any;

    function intersection(left: any, right: any, params: any): any;

    function isAborted(x: any): void;

    function isAsync(x: any): void;

    function isDirty(x: any): void;

    function isValid(x: any): void;

    function jsonSchemaToZui(schema: any): any;

    function lazy(getter: any, params: any): any;

    function literal(value: any, params: any): any;

    function makeIssue(params: any): any;

    function map(keyType: any, valueType: any, params: any): any;

    function nan(params: any): any;

    function nativeEnum(values: any, params: any): any;

    function never(params: any): any;

    function nullable(type: any, params: any): any;

    function number(params: any): any;

    function object(shape: any, params: any): any;

    function objectToZui(obj: any, opts: any, isRoot: any): any;

    function oboolean(): void;

    function onumber(): void;

    function optional(type: any, params: any): any;

    function ostring(): void;

    function pipeline(...args: any[]): void;

    function preprocess(preprocess: any, schema: any, params: any): any;

    function processCreateParams(params: any): any;

    function promise(schema: any, params: any): any;

    function quotelessJson(obj: any): any;

    function record(...args: any[]): void;

    function set(valueType: any, params: any): any;

    function setErrorMap(map2: any): void;

    function strictObject(shape: any, params: any): any;

    function string(params: any): any;

    function symbol(params: any): any;

    function templateLiteral(params: any): any;

    function transformer(schema: any, effect: any, params: any): any;

    function tuple(schemas: any, params: any): any;

    function undefined(params: any): any;

    function union(types: any, params: any): any;

    function unknown(params: any): any;

    function zuiToJsonSchema(zuiType: any, opts: any): any;

    namespace ZodTemplateLiteralUnsupportedCheckError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace ZodTemplateLiteralUnsupportedTypeError {
        const stackTraceLimit: number;

        function captureStackTrace(p0: any, p1: any): any;

    }

    namespace coerce {
        function bigint(arg: any): void;

        function date(arg: any): void;

        function number(arg: any): void;

        function string(arg: any): void;

        function templateLiteral(arg: any): void;

    }

    namespace errorUtil {
        function errToObj(message: any): void;

        function toString(message: any): void;

    }

    namespace late {
        function object(shape: any, params: any): any;

    }

    namespace objectUtil {
        function mergeShapes(first: any, second: any): any;

    }

    namespace util {
        function arrayToEnum(items: any): any;

        function assertEqual(val: any): void;

        function assertIs(_arg: any): void;

        function assertNever(_x: any): void;

        function find(arr: any, checker: any): any;

        function getValidEnumValues(obj: any): any;

        function isInteger(val: any): void;

        function joinValues(array: any, separator: any): any;

        function jsonStringifyReplacer(_: any, value: any): any;

        function objectKeys(obj: any): void;

        function objectValues(obj: any): any;

    }

}

